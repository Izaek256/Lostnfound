<?php
/**
 * Universal Deployment Configuration Manager
 * 
 * ONE FILE TO RULE THEM ALL - handles localhost testing and production deployment
 * 
 * USAGE:
 * 1. Set DEPLOYMENT_MODE below (or via environment variable)
 * 2. Update IP addresses in the deployment scenarios
 * 3. Run this file to deploy configurations to all servers
 * 4. Each server will automatically use the correct settings
 */

// ============================================
// DEPLOYMENT MODE CONFIGURATION
// ============================================

// Set deployment mode - can be overridden by environment variable
if (!defined('DEPLOYMENT_MODE')) {
    // Check environment variable first, then use default
    $mode = $_ENV['DEPLOYMENT_MODE'] ?? 'split';
    define('DEPLOYMENT_MODE', $mode);
}

// ============================================
// DEPLOYMENT SCENARIOS
// ============================================

$deployment_configs = [
    'local' => [
        'name' => 'Local Development (All on localhost)',
        'servera_ip' => 'localhost',
        'serverb_ip' => 'localhost', 
        'serverc_ip' => 'localhost',
        'base_path' => '/Lostnfound',
        'db_host' => 'localhost',
        'db_name' => 'lostfound_db',
        'db_user' => 'root',
        'db_pass' => '',
        'use_https' => false
    ],
    
    'split' => [
        'name' => 'Split Deployment (2 Computers)',
        'servera_ip' => '192.168.72.225',  // Computer 1
        'serverb_ip' => '192.168.72.225',  // Computer 1 (hosts database)
        'serverc_ip' => '192.168.72.170',  // Computer 2
        'base_path' => '/Lostnfound',
        'db_host' => '192.168.72.225',     // Database on ServerB
        'db_name' => 'lostfound_db',
        'db_user' => 'root',
        'db_pass' => '',
        'use_https' => false
    ],
    
    'production' => [
        'name' => 'Production Deployment',
        'servera_ip' => '192.168.72.225',
        'serverb_ip' => '192.168.72.225',
        'serverc_ip' => '192.168.72.170',
        'base_path' => '/Lostnfound',
        'db_host' => '192.168.72.225',
        'db_name' => 'lostfound_db',
        'db_user' => 'root',     // Use dedicated user in production
        'db_pass' => 'secure_password',    // Change this!
        'use_https' => true
    ],
    
    'custom' => [
        'name' => 'Custom Configuration',
        'servera_ip' => 'localhost',
        'serverb_ip' => 'localhost',
        'serverc_ip' => 'localhost',
        'base_path' => '/Lostnfound',
        'db_host' => 'localhost',
        'db_name' => 'lostfound_db',
        'db_user' => 'root',
        'db_pass' => '',
        'use_https' => false
    ]
];

// ============================================
// DEPLOYMENT FUNCTIONS
// ============================================

function getCurrentConfig() {
    global $deployment_configs;
    
    $mode = DEPLOYMENT_MODE;
    if (!isset($deployment_configs[$mode])) {
        echo "Warning: Unknown deployment mode '$mode', falling back to 'local'\n";
        $mode = 'local';
    }
    
    return $deployment_configs[$mode];
}

function generateServerConfig($server_name, $config) {
    $protocol = $config['use_https'] ? 'https' : 'http';
    
    $server_config = "<?php
/**
 * Auto-generated Deployment Configuration for $server_name
 * Generated on: " . date('Y-m-d H:i:s') . "
 * Deployment Mode: " . DEPLOYMENT_MODE . " - {$config['name']}
 * 
 * DO NOT EDIT THIS FILE MANUALLY - it will be overwritten
 * Edit deploy.php instead and run it to regenerate
 */

// ============================================
// DEPLOYMENT MODE AND SERVER INFO
// ============================================
define('DEPLOYMENT_MODE', '" . DEPLOYMENT_MODE . "');
define('DEPLOYMENT_NAME', '{$config['name']}');
define('CURRENT_SERVER', '$server_name');

// ============================================
// SERVER IP ADDRESSES
// ============================================
define('SERVERA_IP', '{$config['servera_ip']}');
define('SERVERB_IP', '{$config['serverb_ip']}');
define('SERVERC_IP', '{$config['serverc_ip']}');

// ============================================
// DATABASE CONFIGURATION
// ============================================
";

    // Database host depends on which server this is
    if ($server_name === 'ServerB') {
        // ServerB hosts the database, so it connects to localhost
        $server_config .= "define('DB_HOST', 'localhost');  // Local database on this server\n";
    } else {
        // Other servers connect to ServerB
        $server_config .= "define('DB_HOST', '{$config['serverb_ip']}');  // Connect to ServerB\n";
    }
    
    $server_config .= "define('DB_NAME', '{$config['db_name']}');
define('DB_USER', '{$config['db_user']}');
define('DB_PASS', '{$config['db_pass']}');

// ============================================
// API AND SERVICE URLS
// ============================================
define('SERVERA_API_URL', '$protocol://{$config['servera_ip']}{$config['base_path']}/ServerA/api');
define('SERVERB_API_URL', '$protocol://{$config['serverb_ip']}{$config['base_path']}/ServerB/api');
define('SERVERC_API_URL', '$protocol://{$config['serverc_ip']}{$config['base_path']}/ServerC/api');

// Upload URLs (ServerB hosts uploads)
define('UPLOADS_BASE_URL', '$protocol://{$config['serverb_ip']}{$config['base_path']}/ServerB/uploads/');

// Health check URLs
define('SERVERA_HEALTH_URL', '$protocol://{$config['servera_ip']}{$config['base_path']}/ServerA/api/health.php');
define('SERVERB_HEALTH_URL', '$protocol://{$config['serverb_ip']}{$config['base_path']}/ServerB/api/health.php');
define('SERVERC_HEALTH_URL', '$protocol://{$config['serverc_ip']}{$config['base_path']}/ServerC/health.php');

// ============================================
// SERVER ROLE DEFINITIONS
// ============================================
define('SERVER_ROLES', [
    'ServerA' => 'Authentication Server',
    'ServerB' => 'Database & File Server', 
    'ServerC' => 'User Interface Server'
]);

// ============================================
// DEPLOYMENT VALIDATION
// ============================================
function validateDeploymentConfig() {
    \$errors = [];
    
    // Check required constants
    \$required = ['SERVERA_IP', 'SERVERB_IP', 'SERVERC_IP', 'DB_HOST', 'DB_NAME'];
    foreach (\$required as \$constant) {
        if (!defined(\$constant)) {
            \$errors[] = \"Missing required constant: \$constant\";
        }
    }
    
    // Validate IP addresses
    \$ips = [SERVERA_IP, SERVERB_IP, SERVERC_IP];
    foreach (\$ips as \$ip) {
        if (\$ip !== 'localhost' && !filter_var(\$ip, FILTER_VALIDATE_IP)) {
            \$errors[] = \"Invalid IP address: \$ip\";
        }
    }
    
    return \$errors;
}

// ============================================
// HELPER FUNCTIONS
// ============================================
function getCurrentServerRole() {
    return SERVER_ROLES[CURRENT_SERVER] ?? 'Unknown Server';
}

function getDeploymentInfo() {
    return [
        'mode' => DEPLOYMENT_MODE,
        'name' => DEPLOYMENT_NAME,
        'server' => CURRENT_SERVER,
        'server_role' => getCurrentServerRole(),
        'servera_ip' => SERVERA_IP,
        'serverb_ip' => SERVERB_IP,
        'serverc_ip' => SERVERC_IP,
        'database_host' => DB_HOST,
        'validation_errors' => validateDeploymentConfig(),
        'generated_at' => '" . date('Y-m-d H:i:s') . "'
    ];
}

function isLocalDeployment() {
    return DEPLOYMENT_MODE === 'local';
}

function isProductionDeployment() {
    return DEPLOYMENT_MODE === 'production';
}

// Auto-validate configuration
\$validation_errors = validateDeploymentConfig();
if (!empty(\$validation_errors)) {
    error_log(\"Deployment Configuration Errors for $server_name: \" . implode(', ', \$validation_errors));
}

// Log deployment info
error_log(\"$server_name loaded deployment config: \" . DEPLOYMENT_MODE . \" mode\");
?>";

    return $server_config;
}

function deployToServer($server_name) {
    $config = getCurrentConfig();
    $server_config = generateServerConfig($server_name, $config);
    
    $config_file = "$server_name/deployment_config.php";
    
    if (file_put_contents($config_file, $server_config)) {
        echo "âœ“ Deployed configuration to $server_name\n";
        return true;
    } else {
        echo "âœ— Failed to deploy configuration to $server_name\n";
        return false;
    }
}

function showCurrentConfiguration() {
    $config = getCurrentConfig();
    
    echo "\n" . str_repeat("=", 60) . "\n";
    echo "CURRENT DEPLOYMENT CONFIGURATION\n";
    echo str_repeat("=", 60) . "\n";
    echo "Mode: " . DEPLOYMENT_MODE . "\n";
    echo "Name: {$config['name']}\n";
    echo "Protocol: " . ($config['use_https'] ? 'HTTPS' : 'HTTP') . "\n";
    echo "\nServer IPs:\n";
    echo "  ServerA (Auth): {$config['servera_ip']}\n";
    echo "  ServerB (DB/Files): {$config['serverb_ip']}\n";
    echo "  ServerC (UI): {$config['serverc_ip']}\n";
    echo "\nDatabase:\n";
    echo "  Host: {$config['db_host']}\n";
    echo "  Name: {$config['db_name']}\n";
    echo "  User: {$config['db_user']}\n";
    echo str_repeat("=", 60) . "\n\n";
}

function deployAll() {
    echo "Deploying configuration to all servers...\n\n";
    
    $servers = ['ServerA', 'ServerB', 'ServerC'];
    $success_count = 0;
    
    foreach ($servers as $server) {
        if (deployToServer($server)) {
            $success_count++;
        }
    }
    
    echo "\nDeployment Summary: $success_count/" . count($servers) . " servers configured successfully\n";
    
    if ($success_count === count($servers)) {
        echo "ðŸŽ‰ All servers configured successfully!\n";
        echo "\nNext steps:\n";
        echo "1. Test localhost: Set mode to 'local' and test on localhost\n";
        echo "2. Deploy split: Set mode to 'split' and copy files to target computers\n";
        echo "3. Go production: Set mode to 'production' when ready\n";
    }
}

// ============================================
// COMMAND LINE INTERFACE
// ============================================

if (php_sapi_name() === 'cli') {
    // Command line usage
    $command = $argv[1] ?? 'deploy';
    
    switch ($command) {
        case 'show':
        case 'info':
            showCurrentConfiguration();
            break;
            
        case 'deploy':
            showCurrentConfiguration();
            deployAll();
            break;
            
        case 'set-mode':
            if (!isset($argv[2])) {
                echo "Usage: php deploy.php set-mode <local|split|production|custom>\n";
                exit(1);
            }
            // This would require modifying the file - for now just show instruction
            echo "To change deployment mode, edit deploy.php and change DEPLOYMENT_MODE\n";
            echo "Or set environment variable: DEPLOYMENT_MODE={$argv[2]}\n";
            break;
            
        default:
            echo "Lost & Found Deployment Manager\n";
            echo "Usage: php deploy.php [command]\n\n";
            echo "Commands:\n";
            echo "  deploy     Deploy configuration to all servers (default)\n";
            echo "  show       Show current configuration\n";
            echo "  set-mode   Instructions for changing deployment mode\n";
    }
} else {
    // Web interface
    showCurrentConfiguration();
    deployAll();
}
?>